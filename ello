package com.company;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;


public class TheSkylineP {
    private static ArrayList<ArrayList<Integer>> lists;
    private static ArrayList<Integer> xOy;
    private static ArrayList<ArrayList<Integer>> temp;
    private static ArrayList<Integer> maxVal;
    final  static int COORDCOUNT = 3;

    public static void main(String[] args)throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.printf("Enter buldings count\n");
        int n = Integer.parseInt(reader.readLine().replaceAll("\\s+",""));

        maxVal = new ArrayList<>();
        maxVal.add(0);

        lists = new ArrayList<>();
        temp = new ArrayList<>(n);

        System.out.println("Enter coordinates");
        for(int i = 0; i < n; i++){
            xOy = new ArrayList<>(COORDCOUNT);

            for(int j = 0; j < COORDCOUNT; j++){
                xOy.add(Integer.parseInt(reader.readLine().replaceAll("\\s+","")));
            }
            xOy.add(xOy.get(1));
            temp.add(xOy);
        }

        for(int i = 0; i < temp.size(); i++){
            xOy = new ArrayList<>();
            xOy.add(temp.get(i).get(0));
            xOy.add(temp.get(i).get(1));
            xOy.add(1);
            lists.add(xOy);

        }

        for(int i = 0; i < temp.size(); i++){
            xOy = new ArrayList<>();
            xOy.add(temp.get(i).get(2));
            xOy.add(temp.get(i).get(3));
            xOy.add(0);
            lists.add(xOy);

        }


        listsSort(lists);
        xtremeFunction(lists);
       /* for (int i = 0; i < lists.size(); i++) {
            for (int j = 0; j < lists.get(i).size(); j++) {
                System.out.print(lists.get(i).get(j) + " ");
            }
            System.out.println();
        }*/


    }

    public static ArrayList<ArrayList<Integer>> listsSort(ArrayList<ArrayList<Integer>> arr){
        temp.clear();
        ArrayList<Integer> temporar = new ArrayList<>();
        for(int i = 0; i < arr.size(); i++){
            temporar.add(arr.get(i).get(0));
        }
        ArrayList<Integer> tempr;
        for (int i = 0; i < arr.size() - 1; i++) {
            for (int j = 1; j < (arr.size() - i); j++) {
                if (arr.get(j - 1).get(0) > arr.get(j).get(0)) {
                    tempr = arr.get(j - 1);
                    arr.set(j - 1, arr.get(j));
                    arr.set(j, tempr);
                }

            }
        }


        return arr;
    }

    public static void xtremeFunction(ArrayList<ArrayList<Integer>> arr){
        ArrayList<Integer> maxV = new ArrayList<>();
        maxV.add(0);
        for(int i = 0; i < arr.size(); i++){
            if(arr.get(i).get(2) == 1){
                if(maxV.size() == 0){
                    maxV.add( arr.get(i).get(1));
                    System.out.println(arr.get(i).get(0) + " " + bufferM(maxV));
                }else if(arr.get(i).get(1) < bufferM(maxV)){
                    maxV.add( arr.get(i).get(1));
                }else if(arr.get(i).get(1) > bufferM(maxV)){
                    maxV.add( arr.get(i).get(1));
                    System.out.println(arr.get(i).get(0) + " " + bufferM(maxV));
                }

            }else if(arr.get(i).get(2) == 0){
               // System.out.println();
                  if (maxV.contains(arr.get(i).get(1))) {
                      maxV.remove(arr.get(i).get(1));
                  }
                  if(maxV.size() == 1) {
                      System.out.println(arr.get(i).get(0) + " " + 0);
                  }

            }
            System.out.println(maxV + ".......");
        }
    }

    public static Integer bufferM(ArrayList<Integer> num){
        return Collections.max(num);
    }
}
